
















	
	--command 0 1 2 cat \
	--command 0 20 6 sort \  		 (sort<a | cat b - | tr A-Z a-z >c) 2>>d
	--command 1 4 6 cat b - \			
	--command 3 5 6 tr A-Z a-z \
	--creat --append --wronly c \ 
	--creat --append --wronly d \     (6) 2>>d
	--creat --tranc --wronly c \     (5) >c
	--creat --trunc --wronly b \
	--pipe \             2 -> 1
	--pipe \             4 -> 3
	--rdonly a \
	--rdonly a \ (0)     <a
	--wait
	--wait 
	int err_fd = open("err.txt", O_CREAT | O_APPEND | O_WRONLY, 644);
	int fd[2];
	should be translated to shell command: cat <a >b 2>>c
	system calls: fork, execvp, pip, dup2, waitpid
	using C programming
                //….
                //….
                waitpid(firstpid, &status, 0);
                waitpid(secondpid, &status, 0);
            char* a[] = {"cat", 0};
            close(fd[0]);
            close(fd[0]);
            close(fd[1]);
            dup2(err_fd, 2);
            dup2(fd,0);
            dup2(fd[1], 1);
            execvp(a[0], a);
            if (returnedpid==firstpid){
            if (returnedpid==secondpid){
            int fd = open("foo.txt", O_RDONLY);
            int returnedpid = waitpid(-1, &status, 0);
            int status;
            }
            }
        char *a[] = {"sort", 0};
        close(fd[1]); //close unused write end
        dup2(err_fd, 2);
        dup2(fd, 1);
        dup2(fd[0], 0);
        else{
        execvp(a[0], a);
        exit(0);
        if (secondpid==0){
        int fd = open("out.txt", O_CREAT | O_TRUNC | O_WRONLY, 0644);
        int secondpid = fork();
        }
        }
      |
      |
      |
      |
    else{
    if (firstpid==0){
    int firstpid = fork();
    parent
    pipe(fd);
    }
    }
 child/\child  
(cat < foo.txt | sort >out.txt) 2>> err.txt
(sys/wait.h) WEXITSTATUS(status)  <=>  status & 0xff
+ Newlab 1+4
+ lab 2+3 may change
+ same minilab 1+2
./simpsh
./simpsh \
1 desgin problem
1: shell command execution
2 minilabs
4 labs
Third argument:
WNOHANG: just pull the status of child process back, not really wait
cat ab->sort
cat abc | sort 
execvp(const char *file, char *const argv[])
fork
implementation of command above:
int main() {													0644:file permission
parent continues
vfork: blocks parent process until lchild process finishes
waidpid(pid, &status, 0); 
}
